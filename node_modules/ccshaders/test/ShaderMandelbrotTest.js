var ShaderNode = cc.Node.extend({
    ctor:function(vertexShader, framentShader) {
        this._super();
        this.init();

        if( 'opengl' in sys.capabilities ) {
            this.setContentSize(256,256);
            this.setAnchorPoint(0.5, 0.5);

            this.shader = cc.GLProgram.create(vertexShader, framentShader);
            this.shader.retain();
            this.shader.addAttribute("aVertex", cc.VERTEX_ATTRIB_POSITION);
            this.shader.link();
            this.shader.updateUniforms();

            var program = this.shader.getProgram();
            this.uniformCenter = gl.getUniformLocation( program, "center");
            this.uniformResolution = gl.getUniformLocation( program, "resolution");

            this.initBuffers();

            this.scheduleUpdate();
            this._time = 0;
        }
    },
    draw:function() {
        var winSize = cc.Director.getInstance().getWinSize();
        this.shader.use();
        this.shader.setUniformsForBuiltins();

        //
        // Uniforms
        //
        this.shader.setUniformLocationF32( this.uniformCenter, winSize.width/2, winSize.height/2);
        this.shader.setUniformLocationF32( this.uniformResolution, 256, 256);

        cc.glEnableVertexAttribs( cc.VERTEX_ATTRIB_FLAG_POSITION );

        // Draw fullscreen Square
        gl.bindBuffer(gl.ARRAY_BUFFER, this.squareVertexPositionBuffer);
        gl.vertexAttribPointer(cc.VERTEX_ATTRIB_POSITION, 2, gl.FLOAT, false, 0, 0);
        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);

        gl.bindBuffer(gl.ARRAY_BUFFER, null);
    },

    update:function(dt) {
        this._time += dt;
    },
    initBuffers:function() {
        //
        // Square
        //
        var squareVertexPositionBuffer = this.squareVertexPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, squareVertexPositionBuffer);
        vertices = [
            256,            256,
            0,              256,
            256,            0,
            0,              0
        ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        gl.bindBuffer(gl.ARRAY_BUFFER, null);
    }
});

var ShaderMandelbrotTest = cc.Layer.extend({
    ctor:function(){
        this._super();
        var winSize = cc.Director.getInstance().getWinSize();

        var shaderNode = new ShaderNode(res.example_Mandelbrot_vsh, res.example_Mandelbrot_fsh);
        this.addChild(shaderNode,10);
        shaderNode.setPosition( winSize.width/2, winSize.height/2);
    }
});
ShaderMandelbrotTest.create = function(args){
    var layer = new ShaderMandelbrotTest();
    return layer.init() ? layer : null;
};
