/**
 * Created by Huabin LING on 1/2/14.
 */

var ScrollViewTest = cc.LayerGradient.extend({
    _clipper: null,
    _content: null,
    _min: 50,
    _max: 150,
    _reverse: false,

    ctor: function() {
        this._super();
        this.init( cc.c4b(0,0,0,255), cc.c4b(98,99,117,255) );

        var width = 200, height = 200, winSize = cc.Director.getInstance().getWinSize();

        // Create clipping node
        this._clipper = cc.ClippingNode.create();
        this._clipper.setContentSize(width, height);
        this._clipper.setAnchorPoint(0.5, 0.5);
        this._clipper.setPosition(winSize.width / 2, winSize.height / 2);
        // Add to layer
        this.addChild(this._clipper);

        // Draw a rectangle stencil with DrawNode
        var stencil = cc.DrawNode.create();
        var rectangle = [cc.p(0, 0), cc.p(width, 0), cc.p(width, height), cc.p(0, height)];
        var white = cc.c4f(1, 1, 1, 1);
        stencil.drawPoly(rectangle, white, 1, white);
        // Set the stencil
        this._clipper.setStencil(stencil);

        // Clipping node content
        this._content = cc.Sprite.create(res.background2_png);
        this._content.setPosition(width / 2, height / 2);
        // Add content as a child of clipping node
        this._clipper.addChild(this._content);

        this.scheduleUpdate();
    },

    update: function() {
        // Move the content to see if the clip effect is right
        var pos = this._content.getPosition();
        if(this._reverse) {
            if(pos.x < this._min){
                this._reverse = false;
                return;
            }

            this._content.setPosition(pos.x-1, pos.y+1);
        }
        else {
            if(pos.x > this._max) {
                this._reverse = true;
                return;
            }

            this._content.setPosition(pos.x+1, pos.y-1);
        }
    }
});

ScrollViewTest.create = function() {
    return new ScrollViewTest();
}