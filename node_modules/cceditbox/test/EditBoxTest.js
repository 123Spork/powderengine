/**
 * Created by Huabin LING on 1/2/14.
 */

var EditBoxTest = cc.Layer.extend({
    _box1: null,
    _box2: null,
    _box3: null,
    _box4: null,

    ctor: function () {
        this._super();
        cc.associateWithNative(this, cc.Layer);

        // Edit box 1 with default value and background sprite at normal state
        this._box1 = cc.EditBox.create(cc.size(65, 40), cc.Scale9Sprite.create(res.orange_edit_png));
        this._box1.setText("Image");
        this._box1.setPosition(220, 250);
        this._box1.setFontColor(cc.c3b(15, 250, 245));
        this._box1.setDelegate(this);
        this.addChild(this._box1);

        // Edit box 2 for password with background sprite at normal state
        this._box2 = cc.EditBox.create(cc.size(130, 40), cc.Scale9Sprite.create(res.green_edit_png));
        this._box2.setText("EditBox Sample");
        this._box2.setPosition(220, 190);
        this._box2.setInputFlag(cc.EDITBOX_INPUT_FLAG_PASSWORD);
        this._box2.setFontColor(cc.c3b(255, 250, 0));
        this._box2.setDelegate(this);
        this.addChild(this._box2);

        // Edit box 3 with place holder and background sprite at normal state
        this._box3 = cc.EditBox.create(cc.size(180, 40), cc.Scale9Sprite.create(res.yellow_edit_png));
        this._box3.setPlaceholderFontColor(cc.c3b(255, 0, 0));
        this._box3.setPlaceHolder("Tooltip:");
        this._box3.setPosition(220, 140);
        this._box3.setDelegate(this);
        this._box3.setFontColor(cc.c3b(5, 4, 10));
        this._box3.setMaxLength(10);
        this.addChild(this._box3);

        // Edit box 4 with background sprite at normal and pressed state
        this._box4 = cc.EditBox.create(cc.size(170, 50), cc.Scale9Sprite.create(res.green_edit_png), cc.Scale9Sprite.create(res.orange_edit_png));
        this._box4.setText("EditBoxs");
        this._box4.setPosition(220, 50);
        this._box4.setFontColor(cc.c3b(251, 250, 0));
        this._box4.setDelegate(this);
        this.addChild(this._box4);
    },

    // Edit box delegation functions: editBoxEditingDidBegin, editBoxEditingDidEnd, editBoxTextChanged, editBoxReturn
    editBoxEditingDidBegin: function (editBox) {
        logTest("editBox " + this._getEditBoxName(editBox) + " DidBegin !");
    },

    editBoxEditingDidEnd: function (editBox) {
        logTest("editBox " + this._getEditBoxName(editBox) + " DidEnd !");
    },

    editBoxTextChanged: function (editBox, text) {
        logTest("editBox " + this._getEditBoxName(editBox) + ", TextChanged, text: " + text);
    },

    editBoxReturn: function (editBox) {
        logTest("editBox " + this._getEditBoxName(editBox) + " was returned !");
    },

    _getEditBoxName :function(editBox){
        if (this._box1 == editBox) {
            return "box1";
        } else if (this._box2 == editBox) {
            return "box2";
        } else if (this._box3 == editBox) {
            return "box3";
        } else if (this._box4 == editBox) {
            return "box4";
        }
        return "Unknown EditBox";
    }
});

EditBoxTest.create = function () {
    return new EditBoxTest();
};