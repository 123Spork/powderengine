/**
 * @fileoverview Java Script Builtins for windows properties.
 *
 * @externs
 */
 
 /**
 * @see https://cocos2d-x.org
 */
 
/**
 * cocos2d-html5-only.
 * @type {string}
 */
CSSProperties.prototype._super;

/**
 * cocos2d-html5-only. We need this because the cc.Class.extend's new
 * infrastructure requires it.
 * @type {string}
 */
CSSProperties.prototype.ctor;

/**
 * cocos2d-html5-only.
 * @type {string}
 */
CSSProperties.prototype.Inflate;

/**
 * cocos2d-html5-only.
 * @type {string}
 */
CSSProperties.prototype.decompress;

/**
 * Accelerometer api
 * cocos2d-html5-only.
 * @type {string}
 */
CSSProperties.prototype.DeviceOrientationEvent;
CSSProperties.prototype.DeviceMotionEvent;
CSSProperties.prototype.accelerationIncludingGravity;
CSSProperties.prototype.gamma;
CSSProperties.prototype.beta;
CSSProperties.prototype.alpha;


var gl = gl || {};
CSSProperties.prototype.gl;

CSSProperties.prototype.AudioContext;
CSSProperties.prototype.webkitAudioContext;
CSSProperties.prototype.mozAudioContext;
CSSProperties.prototype.createBufferSource;
CSSProperties.prototype.createGain;
CSSProperties.prototype.createGainNode;
CSSProperties.prototype.destination;
CSSProperties.prototype.decodeAudioData;
CSSProperties.prototype.gain;
CSSProperties.prototype.connect;

// For IE
CSSProperties.prototype.asUint8Array;
CSSProperties.prototype.responseBody;
CSSProperties.prototype.toArray;


////'use strict';
exports.base64;
exports.array;
exports.string;
exports.arraybuffer;
exports.nodebuffer;
exports.uint8array
exports;
exports.uncompress;
exports.compress;
exports.transformTo;
exports.getTypeOf;
exports.checkSupport;
exports.pretty;
exports.findCompression;
exports.isRegExp;
exports.blob;
exports.string2binary;
exports.string2Uint8Array;
exports.uint8Array2String;
exports.string2Blob;
exports.arrayBuffer2Blob;
exports.isRegExp;
exports.encode;
exports.decode;
JSZip;
window.JSZip;
window.JSZip.prototype;
window.JSZip.prototype.load;
window.JSZip.prototype.file;
window.JSZip.prototype.folder;
window.JSZip.support;
window.JSZip.defaults;
window.JSZip.utils;
window.JSZip.base64;
window.JSZip.compressions;
window.JSZip.file;
window.JSZip.folder;
window.JSZip.remove;
window.JSZip.generate;
window.JSZip.filter;
window.JSZip.file.asText;
window.JSZip.file.asBinary;
window.JSZip.file.asNodeBuffer;
window.JSZip.file.asUint8Array;
window.JSZip.file.asArrayBuffer;
window.JSZip.files;
ZipEntry.prototype;
require('zlibjs/bin/rawdeflate.min');
require('zlibjs/bin/rawinflate.min');
require('zlibjs/bin/rawdeflate.min').Zlib;
require('zlibjs/bin/rawinflate.min').Zlib;
require('zlibjs/bin/rawinflate.min').Zlib.RawInflate;
require('zlibjs/bin/rawdeflate.min').Zlib.RawDeflate;
require('zlibjs/bin/rawinflate.min').Zlib.RawInflate.BufferType;
require('zlibjs/bin/rawdeflate.min').Zlib.RawDeflate.prototype.CompressionType;
require('zlibjs/bin/rawdeflate.min').Zlib.RawDeflate.prototype;
require('zlibjs/bin/rawinflate.min').Zlib.RawInflate.prototype.decompress;
require('zlibjs/bin/rawinflate.min').Zlib.RawInflate.prototype;
require('zlibjs/bin/rawdeflate.min').Zlib.RawDeflate.prototype.compress

// These are the external functions and event names from the pml.js class.
// Any new ones used need to be added here so they don't get obfuscated.
pml.startGame;
pml.eventCallback;
pml.EVENT_CANVAS_ACTIVE;
pml.EVENT_EXIT_REQUESTED;

// All of this was generated by passing moment.js into the Closure Compiler Externs Extractor 
// at http://www.dotnetwise.com/Code/Externs/index.html
// and it seems to have done the trick
var moment = {
    "suppressDeprecationWarnings": {},
    "createFromInputFallback": function () {},
    "min": function () {},
    "max": function () {},
    "utc": function () {},
    "unix": function () {},
    "duration": function () {},
    "version": {},
    "defaultFormat": {},
    "momentProperties": {
        "_isAMomentObject": function () {},
        "_i": function () {},
        "_f": function () {},
        "_l": function () {},
        "_strict": function () {},
        "_isUTC": function () {},
        "_offset": function () {},
        "_pf": function () {},
        "_lang": function () {}
    },
    "updateOffset": function () {},
    "lang": function () {},
    "langData": function () {},
    "isMoment": function () {},
    "isDuration": function () {},
    "weekdaysMin": function () {},
    "weekdaysShort": function () {},
    "weekdays": function () {},
    "monthsShort": function () {},
    "months": function () {},
    "normalizeUnits": function () {},
    "invalid": function () {},
    "parseZone": function () {},
    "parseTwoDigitYear": function () {},
    "fn": {
        "clone": function () {},
        "valueOf": function () {},
        "unix": function () {},
        "toString": function () {},
        "toDate": function () {},
        "toISOString": function () {},
        "toArray": function () {},
        "isValid": function () {},
        "isDSTShifted": function () {},
        "parsingFlags": function () {},
        "invalidAt": function () {},
        "utc": function () {},
        "local": function () {},
        "format": function () {},
        "add": function () {},
        "subtract": function () {},
        "diff": function () {},
        "from": function () {},
        "fromNow": function () {},
        "calendar": function () {},
        "isLeapYear": function () {},
        "isDST": function () {},
        "day": function () {},
        "month": function () {},
        "startOf": function () {},
        "endOf": function () {},
        "isAfter": function () {},
        "isBefore": function () {},
        "isSame": function () {},
        "min": function () {},
        "max": function () {},
        "zone": function () {},
        "zoneAbbr": function () {},
        "zoneName": function () {},
        "parseZone": function () {},
        "hasAlignedHourOffset": function () {},
        "daysInMonth": function () {},
        "dayOfYear": function () {},
        "quarter": function () {},
        "weekYear": function () {},
        "isoWeekYear": function () {},
        "week": function () {},
        "isoWeek": function () {},
        "weekday": function () {},
        "isoWeekday": function () {},
        "isoWeeksInYear": function () {},
        "weeksInYear": function () {},
        "get": function () {},
        "set": function () {},
        "lang": function () {},
        "milliseconds": function () {},
        "millisecond": function () {},
        "seconds": function () {},
        "second": function () {},
        "minutes": function () {},
        "minute": function () {},
        "hours": function () {},
        "hour": function () {},
        "date": function () {},
        "dates": function () {},
        "year": function () {},
        "years": function () {},
        "days": function () {},
        "months": function () {},
        "weeks": function () {},
        "isoWeeks": function () {},
        "quarters": function () {},
        "toJSON": function () {},
        "_lang": {
            "ordinal": function () {},
            "_abbr": {},
            "set": function () {},
            "_months": {
                "0": {},
                "1": {},
                "2": {},
                "3": {},
                "4": {},
                "5": {},
                "6": {},
                "7": {},
                "8": {},
                "9": {},
                "10": {},
                "11": {}
            },
            "months": function () {},
            "_monthsShort": {
                "0": {},
                "1": {},
                "2": {},
                "3": {},
                "4": {},
                "5": {},
                "6": {},
                "7": {},
                "8": {},
                "9": {},
                "10": {},
                "11": {}
            },
            "monthsShort": function () {},
            "monthsParse": function () {},
            "_weekdays": {
                "0": {},
                "1": {},
                "2": {},
                "3": {},
                "4": {},
                "5": {},
                "6": {}
            },
            "weekdays": function () {},
            "_weekdaysShort": {
                "0": {},
                "1": {},
                "2": {},
                "3": {},
                "4": {},
                "5": {},
                "6": {}
            },
            "weekdaysShort": function () {},
            "_weekdaysMin": {
                "0": {},
                "1": {},
                "2": {},
                "3": {},
                "4": {},
                "5": {},
                "6": {}
            },
            "weekdaysMin": function () {},
            "weekdaysParse": function () {},
            "_longDateFormat": {
                "LT": {},
                "L": {},
                "LL": {},
                "LLL": {},
                "LLLL": {}
            },
            "longDateFormat": function () {},
            "isPM": function () {},
            "_meridiemParse": function () {},
            "meridiem": function () {},
            "_calendar": {
                "sameDay": {},
                "nextDay": {},
                "nextWeek": {},
                "lastDay": {},
                "lastWeek": {},
                "sameElse": {}
            },
            "calendar": function () {},
            "_relativeTime": {
                "future": {},
                "past": {},
                "s": {},
                "m": {},
                "mm": {},
                "h": {},
                "hh": {},
                "d": {},
                "dd": {},
                "M": {},
                "MM": {},
                "y": {},
                "yy": {}
            },
            "relativeTime": function () {},
            "pastFuture": function () {},
            "_ordinal": {},
            "preparse": function () {},
            "postformat": function () {},
            "week": function () {},
            "_week": {
                "dow": {},
                "doy": {}
            },
            "_invalidDate": {},
            "invalidDate": function () {}
        }
    }
};
