Scriptcontroller=null;
ScriptController = cc.Layer.extend({
	responses:null,
	nextEvent:null,
	objectContext:null,

	init:function(){
		this._super();
		this.schedule(this.runList);
	},

	runList:function(dt){
	},

	checkRequirements:function(){
		return true;
	},

	finishedCurrentProcess:function(){
		this.responses.splice(0,1);
		if(this.listofevents.length==0){
			this.unschedule(this.runList);
			destroyScriptController(this,objectContext);
		}
	},
};

ScriptController.createWithEventList=function(inputEvent,objectContext,wait){
	
	if(objectContext.scriptHandler!=null){
		this.nextEventHandler = ScriptController.createWithEventList(inputEvent,objectContext,true);
	}

	var instance = new ScriptController();
	instance.responses = inputEvent["responses"];
	if(objectContext){
		instance.objectContext=objectContext;
		objectContext.scriptHandler=this;
	}
	if(instance.checkRequirements()){
		instance.init();
		return instance;
	}
};

ItemScriptController = ScriptController.extend({

	runList:function(dt){
		this._super(dt);
	},

	checkRequirements:function(dt){
		if(this._super(dt)==true){
			return true;
		}
		return true;
	}

});

NPCScriptController = ScriptController.extend({

	runList:function(dt){
		this._super(dt);
	},

	checkRequirements:function(dt){
		if(this._super(dt)==true){
			return true;
		}
		return true;
	}

});

var handleItemScript = function(eventname,item,ignoreList){
	MainScene.scheduleOnce(function(){
		var scriptData=[];
		var userItems=PlayersController.getYou().items;
		if(item && item["script"]){
			scriptData = ObjectLists.getScriptList()[item["script"]]["data"];
		}
		for(var j=0;j<scriptData.length;j++){
			if(scriptData[j]["type"]==eventname){
				var defaultEvent = scriptData[j]["responses"];
				var allowContinue=true;
				for(var k=0;k<defaultEvent.length;k++){
					switch(defaultEvent[k]["type"]){
						case "Is Panel Visibility":
							if(ignoreList && ignoreList["Is Panel Visibility"]){
								break;
							}
							var visible = defaultEvent[k]["data"]["visible"]==1?true:false;
							switch(defaultEvent[k]["data"]["panel"]){
								case 0: 
									if(Inventory!=null && !Inventory._parent) Inventory=null;
									if(Inventory && !visible){
										allowContinue=false; break; break;
									}
									if(!Inventory && visible){
										allowContinue=false; break; break;
									}
								break;
								case 1:
									if(Equipment!=null && !Equipment._parent) Equipment=null;
									if(Equipment && !visible){
										allowContinue=false; break; break;
									}
									if(!Equipment && visible){
										allowContinue=false; break; break;
									}
								break;
								case 2:
									if(Skills!=null && !Skills._parent) Skills=null;
									if(Skills && !visible){
										allowContinue=false; break; break;
									}
									if(!Skills && visible){
										allowContinue=false; break; break;
									}
								break;
							}
						break;
						case "Is Player Inventory Space":
							if(ignoreList && ignoreList["Is Player Inventory Space"]){
								break;
							}
							if(!defaultEvent[k]["data"]["space"]){
								var space=0;
							}else{
								var space = defaultEvent[k]["data"]["space"]
							}
							var count=0;
							for(var p=0;p<40;p++){
								if(!userItems["stored"][p]){
									count++;
								}
							}
							if(count<space){
								allowContinue=false; break; break;
							}
						break;
						case "Has Player Item":
							if(ignoreList && ignoreList["Has Player Item"]){
								break;
							}
							if(defaultEvent[k]["data"]["item"]){
								if(!defaultEvent[k]["data"]["amount"]){
									var amount=0;
								}else{
									var amount=defaultEvent[k]["data"]["amount"];
								}	
								var count=0;
								var itemName = ObjectLists.getItemList()[defaultEvent[k]["data"]["item"]]["name"];
								for(var i in userItems["stored"]){
									if(userItems["stored"][i] && userItems["stored"][i]["name"]==itemName){
										count++;
									}
								}
								if(count<amount){
									allowContinue=false; break; break;
								}
							}
						break;
						case "Is Player Statistics":
							if(ignoreList && ignoreList["Is Player Statistics"]){
								break;
							}
							var name = ObjectLists.getSkillsList()[defaultEvent[k]["data"]["skill"]]["name"];
							if(!defaultEvent[k]["data"]["levelUpper"]){
								defaultEvent[k]["data"]["levelUpper"]=0;
							}
							if(!defaultEvent[k]["data"]["levelLower"]){
								defaultEvent[k]["data"]["levelLower"]=0;
							}
							if(!defaultEvent[k]["data"]["healthUpper"]){
								defaultEvent[k]["data"]["healthUpper"]=0;
							}
							if(!defaultEvent[k]["data"]["healthLowe"]){
								defaultEvent[k]["data"]["healthLower"]=0;
							}
							if(!defaultEvent[k]["data"]["xpUpper"]){
								defaultEvent[k]["data"]["xpUpper"]=0;
							}
							if(!defaultEvent[k]["data"]["xpLower"]){
								defaultEvent[k]["data"]["xpLower"]=0;
							}
							if(defaultEvent[k]["data"]["levelUpper"]!=0 || defaultEvent[k]["data"]["levelLower"]!=0){
								var valtocheck = SkillBarsInstance.skillsData[name]["level"]+1;
								if(valtocheck>defaultEvent[k]["data"]["levelUpper"] || valtocheck<defaultEvent[k]["data"]["levelLower"]){
									allowContinue=false; break; break;
								}
							}
							if(defaultEvent[k]["data"]["healthUpper"]!=0 || defaultEvent[k]["data"]["healthLower"]!=0){
								var valtocheck = SkillBarsInstance.skillsData[name]["currenthealth"];
								if(valtocheck>defaultEvent[k]["data"]["healthUpper"] || valtocheck<defaultEvent[k]["data"]["healthLower"]){
									allowContinue=false; break; break;
								}
							}

							if(defaultEvent[k]["data"]["xpUpper"]!=0 || defaultEvent[k]["data"]["xpLower"]!=0){
								var valtocheck = SkillBarsInstance.skillsData[name]["experience"];
								if(valtocheck>defaultEvent[k]["data"]["xpUpper"] || valtocheck<defaultEvent[k]["data"]["xpLower"]){
									allowContinue=false; break; break;
								}
							}
						break;
					}
					var defaultEvent = scriptData[j]["responses"];
					for(var k=0;k<defaultEvent.length;k++){
						switch(defaultEvent[k]["type"]){
							case "Equip Item":
								if(ignoreList && ignoreList["Equip Item"]){
									break;
								}
								var place = defaultEvent[k]["data"]["equip"];
								if(place=="bothArms"){
									place="lArm";
									if(!this.items["equipped"]["rArm"]){
										place="rArm";
									}
								}
								var temp=null;
								if(userItems["equipped"][place]){
									temp = cloneObj(userItems["equipped"][place]);
									handleItemScript("On Dequip",temp)
								}
								userItems["equipped"][place]=cloneObj(item);
								item=temp;
								if(Inventory){
									Inventory.updateTileGrid();
								}
								if(Equipment){
									Equipment.updateTileGrid();
								}
							break;
							case "Give /Take Item":
								if(ignoreList && ignoreList["Give /Take Item"]){
									break;
								}
								if(!defaultEvent[k]["data"]["amount"] || defaultEvent[k]["data"]["item"]==null || defaultEvent[k]["data"]["item"]=='undefined'){
									break;
								}
								var contextitem = ObjectLists.getItemList()[defaultEvent[k]["data"]["item"]];
								if(defaultEvent[k]["data"]["amount"]>0){
									var space = defaultEvent[k]["data"]["amount"];
									if(contextitem["stackable"]==true){
										for(var p=0;p<40;p++){
											if(userItems["stored"][p] && userItems["stored"][p]["name"]==contextitem["name"]){
												space=0;
											}
										}
										if(count!=0){
											space=1;
										}
									}else{
										var count=0;
										for(var p=0;p<40;p++){
											if(!userItems["stored"][p]){
												count++;
											}
										}
									}
									if(count<space){
										break;
									}else{
										if(contextitem["stackable"]==true){
											var doneAdd=false;
											for(var p=0;p<40;p++){
												if(userItems["stored"][p] && userItems["stored"][p]["name"]==contextitem["name"]){
													userItems["stored"][p]["amount"] +=defaultEvent[k]["data"]["amount"];
													if(Inventory){
														Inventory.setStackableLabel(p,userItems["stored"][p]["amount"]);	
													}
													doneAdd=true;
													break;
												}
											}
											if(doneAdd==false){
												for(var p=0;p<40;p++){
													if(!userItems["stored"][p]){
														userItems["stored"][p]=cloneObj(contextitem);
														userItems["stored"][p]["amount"]=defaultEvent[k]["data"]["amount"];
														if(Inventory){
															Inventory.setStackableLabel(p,userItems["stored"][p]["amount"]);	
														}
														break;
													}
												}
											}
										}else{
											for(var n=0;n<defaultEvent[k]["data"]["amount"];n++){
												for(var p=0;p<40;p++){
													if(!userItems["stored"][p]){
														userItems["stored"][p]=cloneObj(contextitem);
														break;
													}
												}
											}
										}
									}
								}else if(defaultEvent[k]["data"]["amount"]<0){
									var amount=Math.abs(defaultEvent[k]["data"]["amount"]);
									var count=0;
									var itemName = contextitem["name"];
									for(var p in userItems["stored"]){
										if(userItems["stored"][p] && userItems["stored"][p]["name"]==itemName){
											count++;
										}
									}
									if(count<amount){
										break;
									}else{
										for(var n=0;n<Math.abs(defaultEvent[k]["data"]["amount"]);n++){
											for(var p in userItems["stored"]){
												if(userItems["stored"][p] && userItems["stored"][p]["name"]==itemName){
													console.log("gettin rid"+n);
													user["stored"][p]=null;
													break;
												}
											}
										}
									}
										
								}
							break;
							case "Modify Player Stats":
								if(ignoreList && ignoreList["Modify Player Stats"]){
									break;
								}
								if(ObjectLists.getSkillsList()[defaultEvent[k]["data"]["skill"]]){
									var skillname = ObjectLists.getSkillsList()[defaultEvent[k]["data"]["skill"]]["name"];
									SkillBars.modifyModifier(skillname,defaultEvent[k]["data"]["level"]);
									SkillBars.modifyHealth(skillname,defaultEvent[k]["data"]["health"]);
									SkillBars.modifyXP(skillname,defaultEvent[k]["data"]["xp"]);
								}
							break;
							case "Warp Player":
								if(ignoreList && ignoreList["Warp Player"]){
									break;
								}
								var x=defaultEvent[k]["data"]["index"] % gridWidth;
								var y=Math.floor(defaultEvent[k]["data"]["index"]/gridWidth);
								PlayersController.getYou().setPosition(x*32,y*32);
								sendMessageToServer({"changemap":defaultEvent[k]["data"]["mapnum"], "setTo":defaultEvent[k]["data"]["index"]});
								GameMap.goToMap(defaultEvent[k]["data"]["mapnum"]);
								GameMap.goToOffsetFromPosition(x*32,y*32);
							break;
							case "Read Item":
								if(ignoreList && ignoreList["Read Item"]){
									break;
								}
								MainScene.showBook(item["name"],defaultEvent[k]["data"]["say"]);
							break;
							case "Open/Close Panel":
								if(ignoreList && ignoreList["Open/Close Panel"]){
									break;
								}
								var show = defaultEvent[k]["data"]["visible"]==1?true:false;
								switch(defaultEvent[k]["data"]["panel"]){
									case 0: 
										if(Inventory!=null && !Inventory._parent) Inventory=null;
										if(show==true){
											if(Inventory){
												Inventory.updateTileGrid();
											}else{
												Inventory = new InventoryPanel();
												Inventory.init();
												Inventory.didBecomeActive();
												MainScene.addChild(Inventory);
											}
										}else{
											if(Inventory){
												Inventory.willTerminate();
												Inventory.removeFromParent();
												Inventory=null;
											}
										}
									break;
									case 1:
										if(Equipment!=null && !Equipment._parent) Equipment=null;
										if(show==true){
											if(Equipment){
												Equipment.updateTileGrid();
											}else{
												Equipment = new EquipmentPanel();
												Equipment.init();
												Equipment.didBecomeActive();
												MainScene.addChild(Equipment);
											}
										}else{
											if(Equipment){
												Equipment.willTerminate();
												Equipment.removeFromParent();
												Equipment=null;
											}
										}
									break;
									case 2:
										if(Skills!=null && !Skills._parent) Skills=null;
										if(show==true){
											if(Skills){
												Skills.updateTileGrid();
											}else{
												Skills = new SkillsPanel();
												Skills.init();
												Skills.didBecomeActive();
												MainScene.addChild(Skills);
											}
										}else{
											if(Skills){
												Skills.willTerminate();
												Skills.removeFromParent();
												Skills=null;
											}
										}
									break;
								}
							break;
							case "Destroy":
								if(ignoreList && ignoreList["Destroy"]){
									break;
								}
								item=null;
								if(tile.getScriptObject()["temp"]){
									sendMessageToServer({"pickupitem":indexFromPos(gp.x,gp.y),"mapnumber":GameMap.getMapNumber(),"temp":true});
								} else{
									sendMessageToServer({"pickupitem":indexFromPos(gp.x,gp.y),"mapnumber":GameMap.getMapNumber()});
								}
								if(Inventory){
									Inventory.updateTileGrid();
								}
								k=defaultEvent.length;
							break;
													
						}
					}	
				}
			}
		}
	});
};