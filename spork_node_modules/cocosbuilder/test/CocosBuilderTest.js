var CocosBuilderTest = cc.Layer.extend({
    init : function(){
        this._super();

        cc.BuilderReader.setResourcePath("res/");
        var node = cc.BuilderReader.load(res.HelloCocosBuilder_ccbi, this);
        if(node != null)
            this.addChild(node);
        return true;
    }
});

CocosBuilderTest.create = function(args){
    var layer = new CocosBuilderTest();
    return layer.init() ? layer : null;
};

var HelloCocosBuilderLayer = function() {

    this.openTest = function(ccbFileName) {

        cc.BuilderReader.setResourcePath("res/");
        var node = cc.BuilderReader.load(ccbFileName, this);

        this.mTestTitleLabelTTF.setString(ccbFileName);
        var scene = cc.Scene.create();
        if(node != null)
            scene.addChild(node);

        /* Push the new scene with a fancy transition. */
        cc.Director.getInstance().pushScene(scene);
    };

    // ccb Callback
    this.onMenuTestClicked = function() {
        this.openTest(res.TestMenus_ccbi);
    };

    this.onSpriteTestClicked = function() {
        this.openTest(res.TestSprites_ccbi);
    };
    this.onButtonTestClicked = function() {
        this.openTest(res.TestButtons_ccbi);
    };

    this.onAnimationsTestClicked = function() {
        this.openTest(res.TestAnimations_ccbi);
    };

    this.onParticleSystemTestClicked = function() {
        this.openTest(res.TestParticleSystems_ccbi);
    };

    this.onScrollViewTestClicked = function() {
        this.openTest(res.TestScrollViews_ccbi);
    };

    this.onTimelineCallbackSoundClicked = function() {
        this.openTest(res.TestTimelineCallback_ccbi);
    };
};

var TestAnimationsLayer = function() {
    this.onCCControlButtonIdleClicked = function(sender, controlEvent) {
        this.rootNode.animationManager.runAnimationsForSequenceNamedTweenDuration("Idle", 0.3);
    };

    this.onCCControlButtonWaveClicked = function(sender, controlEvent) {
        this.rootNode.animationManager.runAnimationsForSequenceNamedTweenDuration("Wave", 0.3);
    };

    this.onCCControlButtonJumpClicked = function(sender, controlEvent) {
        this.rootNode.animationManager.runAnimationsForSequenceNamedTweenDuration("Jump", 0.3);
    };

    this.onCCControlButtonFunkyClicked = function(sender, controlEvent) {
        this.rootNode.animationManager.runAnimationsForSequenceNamedTweenDuration("Funky", 0.3);
    };
};

var TestButtonsLayer = function() {
    this.onCCControlButtonClicked = function(sender,controlEvent) {
        switch(controlEvent) {
            case cc.CONTROL_EVENT_TOUCH_DOWN:
                this.mCCControlEventLabel.setString("Touch Down.");
                break;
            case cc.CONTROL_EVENT_TOUCH_DRAG_INSIDE:
                this.mCCControlEventLabel.setString("Touch Drag Inside.");
                break;
            case cc.CONTROL_EVENT_TOUCH_DRAG_OUTSIDE:
                this.mCCControlEventLabel.setString("Touch Drag Outside.");
                break;
            case cc.CONTROL_EVENT_TOUCH_DRAG_ENTER:
                this.mCCControlEventLabel.setString("Touch Drag Enter.");
                break;
            case cc.CONTROL_EVENT_TOUCH_DRAG_EXIT:
                this.mCCControlEventLabel.setString("Touch Drag Exit.");
                break;
            case cc.CONTROL_EVENT_TOUCH_UP_INSIDE:
                this.mCCControlEventLabel.setString("Touch Up Inside.");
                break;
            case cc.CONTROL_EVENT_TOUCH_UP_OUTSIDE:
                this.mCCControlEventLabel.setString("Touch Up Outside.");
                break;
            case cc.CONTROL_EVENT_TOUCH_CANCEL:
                this.mCCControlEventLabel.setString("Touch Cancel.");
                break;
            case cc.CONTROL_EVENT_VALUECHANGED:
                this.mCCControlEventLabel.setString("Value Changed.");
                break;
            default:
                // cc.assert(false);
                break;
        }
    };
};

var TestLabelsLayer = function() {};

var TestMenusLayer = function() {
    this.onMenuItemAClicked = function(sender) {
        this.mMenuItemStatusLabelBMFont.setString("Menu Item A clicked.");
    };

    this.onMenuItemBClicked = function(sender) {
        this.mMenuItemStatusLabelBMFont.setString("Menu Item B clicked.");
    };

    this.onMenuItemCClicked = function(sender) {
        this.mMenuItemStatusLabelBMFont.setString("Menu Item C clicked.");
    };
};

var TestParticleSystemsLayer = function() {};

var TestScrollViewsLayer = function() {};

var TestSpritesLayer = function() {};

var TestHeaderLayer = function() {
    // CCB callback
    this.onBackClicked = function() {
        cc.Director.getInstance().popScene();
    };
};

var TestTimelineLayer = function() {
    this.onCallback1 = function(sender) {
        // Rotate the label when the button is pressed
        this.helloLabel.runAction(cc.RotateBy.create(1,360));
        this.helloLabel.setString("Callback 1");
    };

    this.onCallback2 = function(sender) {
        // Rotate the label when the button is pressed
        this.helloLabel.runAction(cc.RotateBy.create(1,-360));
        this.helloLabel.setString("Callback 2");
    };
};