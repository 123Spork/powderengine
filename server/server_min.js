var http=require("http"),fs=require("fs"),io=require("socket.io"),fs=require("fs");
fs.readFile("config.txt","utf8",function(x,v){var p=parseInt(v.split("\n")[1]),k=[],q=[],n=[],e=[],r=[],c=[],l=[],m=[],f={};fs.readdirSync("./maps").forEach(function(b){r[parseInt(b.split(".")[0])]=require("./maps/"+b)});fs.readdirSync("./additionals").forEach(function(b){"warps.json"==b&&(l=require("./additionals/warps.json"));"items.json"==b&&(m=require("./additionals/items.json"))});var c=require("./tools/updatedata.json"),s=http.createServer(function(b,a){a.writeHead(200,{"Content-Type":"text/html"});
a.end("<h1>Hello Socket Lover!</h1>")});s.listen(p);p=io.listen(s);p.on("message",function(b){console.log("Received a message from the server!",b)});var w=function(b,a){fs.writeFile("maps/"+b+".json",JSON.stringify(a),function(a){})},t=function(b){fs.writeFile("./additionals/warps.json",JSON.stringify(b),function(a){})},u=function(b){fs.writeFile("./additionals/items.json",JSON.stringify(b),function(a){})},h=function(){fs.writeFile("tools/updatedata.json",JSON.stringify(c),function(b){})};p.on("connection",
function(b){b.on("message",function(a){a=JSON.parse(a);if(a.login){for(var d in e)if(e[d]==a.username){b.send(JSON.stringify({login_fail:"Username in use already."}));return}if(-1==e.indexOf(a.username)){b.send(JSON.stringify({login_success:!0}));e[b.id]=a.username;n[b.id]=!0;q[a.username]=1;b.broadcast.send(JSON.stringify({newPlayer:a.username}));for(d in n)d!=b.id&&!0==n[d]&&(k[d]?(b.send(JSON.stringify({moveTo:k[d],id:e[d]})),b.send(JSON.stringify({changemap:q[e[d]],id:e[d],setTo:k[d]}))):b.send(JSON.stringify({moveTo:"default",
id:e[d]})));for(d in f[1])b.send(JSON.stringify(f[1][d]))}}if(a.sync){var g={sync:!0};if(!c[0]||a.mapupdate<c[0])c[0]||(c[0]=Date.now(),h()),g.maptime=c[0],g.mapdata=r;if(!c[0]||a.warpupdate<c[1])c[1]||(c[1]=Date.now(),h()),g.warptime=c[0],g.warpdata=l;if(!c[0]||a.itemupdate<c[2])c[2]||(c[2]=Date.now(),h()),g.itemtime=c[0],g.itemdata=m;b.send(JSON.stringify(g))}a.moveTo&&(b.broadcast.send(JSON.stringify({moveTo:a.moveTo,id:e[b.id]})),k[b.id]=a.moveTo);a.droppeditem&&(b.send(JSON.stringify({droppeditem:a.droppeditem,
mapnumber:a.mapnumber,index:a.index})),b.broadcast.send(JSON.stringify({droppeditem:a.droppeditem,mapnumber:a.mapnumber,index:a.index})),f[a.mapnumber]||(f[a.mapnumber]=[]),f[a.mapnumber].push({droppeditem:a.droppeditem,mapnumber:a.mapnumber,index:a.index}));if(a.pickupitem&&(b.send(JSON.stringify({pickupitem:a.pickupitem,mapnumber:a.mapnumber})),b.broadcast.send(JSON.stringify({pickupitem:a.pickupitem,mapnumber:a.mapnumber})),a.temp))for(g=f[a.mapnumber],d=g.length-1;0<=d;d--)if(g[d].index==a.pickupitem){f[a.mapnumber].splice(d,
1);break}a.savemap&&(c[0]=Date.now(),h(),w(a.savemap,a.mapdata),r[a.savemap]=a.mapdata,a.updatetime=c[0],b.broadcast.send(JSON.stringify(a)),b.send(JSON.stringify(a)));a.savewarps&&(c[1]=Date.now(),h(),l[parseInt(a.savewarps)]=a.warpdata,t(l),a.updatetime=c[1],b.broadcast.send(JSON.stringify(a)),b.send(JSON.stringify(a)));a.savewarpswhole&&(c[1]=Date.now(),h(),l=a.savewarpswhole,t(l),a.updatetime=c[1],b.broadcast.send(JSON.stringify(a)),b.send(JSON.stringify(a)));a.saveitems&&(c[2]=Date.now(),h(),
m[parseInt(a.saveitems)]=a.itemdata,u(m),a.updatetime=c[2],b.broadcast.send(JSON.stringify(a)),b.send(JSON.stringify(a)));a.saveitemswhole&&(c[2]=Date.now(),h(),m=a.saveitemswhole,u(m),a.updatetime=c[2],b.broadcast.send(JSON.stringify(a)),b.send(JSON.stringify(a)));a.chatMessage&&b.broadcast.send(JSON.stringify({chatMessage:e[b.id]+": "+a.chatMessage}));a.logout&&(b.broadcast.send(JSON.stringify({playerLeft:e[b.id]})),e[b.id]=void 0,k[b.id]=void 0);a.disconnect&&(b.broadcast.send(JSON.stringify({playerLeft:e[b.id]})),
n[b.id]=void 0,e[b.id]=void 0,k[b.id]=void 0);if(a.changemap)for(d in b.broadcast.send(JSON.stringify({id:e[b.id],changemap:a.changemap,setTo:a.setTo})),q[e[b.id]]=a.changemap,f[a.changemap])b.send(JSON.stringify({droppeditem:f[a.changemap][d].droppeditem,mapnumber:a.changemap,index:f[a.changemap][d].index}));a.diceroll&&b.broadcast.send(JSON.stringify({diceroll:a.diceroll}));a.coinflip&&b.broadcast.send(JSON.stringify({coinflip:a.coinflip}));a.dance&&b.broadcast.send(JSON.stringify({dance:a.dance}));
a.afk&&(Math.random(),b.broadcast.send(JSON.stringify({afk:e[b.id]})))});b.on("disconnect",function(){b.broadcast.send(JSON.stringify({playerLeft:e[b.id]}));b.send(JSON.stringify({disconnect:!0}));console.log("CLIENT HAS DISCONNECTED");n[b.id]=void 0;e[b.id]=void 0;k[b.id]=void 0})})});